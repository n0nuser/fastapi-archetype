# coding: utf-8

from typing import Optional

from pydantic import BaseModel, Field, validator

from src.api.schemas.pagination_links import PaginationLinks


class Pagination(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Pagination - a model defined in OpenAPI

        offset: The offset of this Pagination [Optional].
        limit: The limit of this Pagination [Optional].
        pageNumber: The pageNumber of this Pagination [Optional].
        totalPages: The totalPages of this Pagination [Optional].
        totalElements: The totalElements of this Pagination [Optional].
        links: The links of this Pagination [Optional].
    """

    offset: Optional[int] = Field(alias="offset", default=None)
    limit: Optional[int] = Field(alias="limit", default=None)
    pageNumber: Optional[int] = Field(alias="pageNumber", default=None)
    totalPages: Optional[int] = Field(alias="totalPages", default=None)
    totalElements: Optional[int] = Field(alias="totalElements", default=None)
    links: Optional[PaginationLinks] = Field(alias="links", default=None)

    @validator("offset")
    def offset_max(cls, value):
        if value is not None:
            assert value <= 255
        return value

    @validator("offset")
    def offset_min(cls, value):
        if value is not None:
            assert value >= 0
        return value

    @validator("limit")
    def limit_max(cls, value):
        if value is not None:
            assert value <= 255
        return value

    @validator("limit")
    def limit_min(cls, value):
        if value is not None:
            assert value >= 0
        return value

    @validator("pageNumber")
    def pageNumber_max(cls, value):
        if value is not None:
            assert value <= 255
        return value

    @validator("pageNumber")
    def pageNumber_min(cls, value):
        if value is not None:
            assert value >= 0
        return value

    @validator("totalPages")
    def totalPages_max(cls, value):
        if value is not None:
            assert value <= 255
        return value

    @validator("totalPages")
    def totalPages_min(cls, value):
        if value is not None:
            assert value >= 0
        return value

    @validator("totalElements")
    def totalElements_max(cls, value):
        if value is not None:
            assert value <= 255
        return value

    @validator("totalElements")
    def totalElements_min(cls, value):
        if value is not None:
            assert value >= 0
        return value


Pagination.update_forward_refs()
